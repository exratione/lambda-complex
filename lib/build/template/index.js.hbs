/**
 * @fileOverview Wrapper for a lambda-complex lambda function.
 *
 * This wraps the handle function to interact with the queues.
 *
 * We can't expect any particular NPM package other than AWS SDK to be
 * installed, so we have to do everything the hard way.
 *
 * Beyond that, there is a surprising level of complexity involved in ensuring
 * that the right setup and cleanup happens at the right time: loading the ARN
 * map, incrementing and decrementing concurrency counts, deleting queue
 * messages on success, reacting to exceptions in third party code, and so on.
 */

var util = require('util');

// ---------------------------------------------------------------------------
// The only non-core items that can be required.
// ---------------------------------------------------------------------------

// Expect lambda-complex application configuration to be placed in _config.js.
var config = require('./_config');
// Expect lambda-complex application constants to be placed in _constants.js.
var constants = require('./_constants');
// Expect lambda-complex application utilities to be placed in _utilities.js.
var utilities = require('./_utilities');

// ---------------------------------------------------------------------------
// Properties.
// ---------------------------------------------------------------------------

// Holder for functions and properties so that we can expose them for unit
// testing. Anything under lc should be considered private inner workings.
var lc = {};

// Exposed for unit testing purposes.
lc.config = config;
lc.utilities = utilities;

// Processing uncaught exceptions can mess up unit tests very efficiently, so
// expose a flag to turn it off.
lc.handleUncaughtException = true;

// Has the concurrency count for this component been incremented?
lc.incremented = false;

// For event from message function types, there will be a receiptHandle
// associated with the SQS message.
lc.receiptHandle = undefined;

// The ARN map that will be obtained and set by the handler.
lc.arnMap = undefined;

// The wrapped context will be created by the handler.
lc.wrappedContext = undefined;

// ---------------------------------------------------------------------------
// Properties derived from template variables.
// ---------------------------------------------------------------------------

// The lambda function name.
lc.componentName = '{{{componentName}}}';
lc.componentsByName = {};

// Build a object to index components by name.
(function () {
  for (var index = 0, length = config.components.length; index < length; index++) {
    lc.componentsByName[config.components[index].name] = config.components[index];
  }
})();

lc.component = lc.componentsByName[lc.componentName];
lc.handler = lc.component.lambda.handler;
lc.handlerFunctionName = utilities.getFunctionNameFromHandle(lc.handler);

// Expect the old export file to have been moved to a new path. We can figure
// out where from the handle.
var originalExport = require('./_' + utilities.getFileBaseNameFromHandle(lc.handler));

// ---------------------------------------------------------------------------
// Functions.
// ---------------------------------------------------------------------------

/**
 * Delete a message from the queue. This must be done on completion of
 * successful processing.
 *
 * @param {String} receiptHandle The unique receipt handle provided when the
 *   message was received.
 * @param {Function} callback Of the form function (error).
 */
lc.deleteMessageFromInputQueue = function (receiptHandle, callback) {
  utilities.deleteMessage(
    utilities.getQueueUrl(lc.component.name, lc.arnMap),
    receiptHandle,
    callback
  );
};

/**
 * Helper function for sending to one destination.
 *
 * @param {Mixed} data The data to be sent.
 * @param {String} destination The name of the destination Lambda function.
 * @param {Function} innerCallback Of the form function (error).
 */
lc.sendDataToDestination = function (data, destination, callback) {
  var component = lc.componentsByName[destination];

  if (!component) {
    return callback(new Error(util.format(
      'Invalid component specified as destination for result data: %s',
      destination
    )));
  }

  if (component.type === constants.componentType.EVENT_FROM_INVOCATION) {
    utilities.invoke(
      utilities.getLambdaFunctionArn(component.name, lc.arnMap),
      data,
      callback
    );
  }
  else if (component.type === constants.componentType.EVENT_FROM_MESSAGE) {
    utilities.sendMessage(
      utilities.getQueueUrl(component.name, lc.arnMap),
      data,
      callback
    );
  }
  else {
    callback(new Error(util.format(
      'Cannot send data to component %s as it has an invalid type: %s',
      destination,
      component.type
    )));
  }
};

/**
 * Send on the result if it is present to destinations defined.
 *
 * Only the data attribute is actually sent on to the designated destination
 * Lambda functions.
 *
 * The error is included for provision to routing functions; if there is no
 * routing function, then an error will prevent data from being sent.
 *
 * @param {Error} error Any Error instance resulting from the function.
 * @param {Mixed} result The result provided.
 * @param {Function} callback Of the form function(error).
 */
lc.sendData = function (error, result, callback) {
  var routing = lc.component.routing;
  var validTypes = ['string', 'function'];
  var expandedRouting = [];

  // No routing definition, then call back.
  if (!routing) {
    return callback();
  }

  if (!utilities.isArray(routing)) {
    routing = [routing];
  }

  // Fill out the expanded routing array with destinations.
  routing.forEach(function (routingItem) {
    var routingItemType = typeof routingItem;
    var fnResult;

    if (
      // Only strings and functions are valid.
      (validTypes.indexOf(routingItemType) === -1) ||
      // Only consider function routing definitions if there is an error here.
      // If it is a string, skip it.
      (error && routingItemType !== 'function')
    ) {
      return;
    }

    if (routingItemType === 'string') {
      expandedRouting.push({
        name: routingItem,
        data: result
      });
    }

    if (routingItemType === 'function') {
      fnResult = routingItem(error, result);
      if (!utilities.isArray(fnResult)) {
        fnResult = [fnResult];
      }

      // Filter out things that don't look right.
      fnResult = fnResult.filter(function (item) {
        return item && item.name;
      });

      expandedRouting = expandedRouting.concat(fnResult);
    }
  });

  // If left with no destinations then call back.
  if (!expandedRouting.length) {
    return callback();
  }

  // TODO: too large a set of destinations could cause problems here since this
  // lot run in parallel.
  utilities.each(expandedRouting, function (destination, innerCallback) {
    lc.sendDataToDestination(destination.data, destination.name, innerCallback);
  }, callback);
};

/**
 * The underlying Lambda functino code is done and has called one of the wrapped
 * context methods, then we need to clean up:
 *
 * - Send on the data.
 * - Delete the message from the queue if this is an event from message type.
 * - Decrement the concurrency count.
 * - Invoke one of the original context functions: succeed, fail, done.
 *
 * @param {String} contextMethod 'succeed' | 'fail' | 'done'.
 * @param {Mixed[]} args Arguments to apply to the context.
 */
lc.finalizeInvocation = function (contextMethod, args) {
  var isFailure;

  if (
    (contextMethod === 'fail') ||
    ((contextMethod === 'done') && args[0])
  ) {
    isFailure = true;
  }
  else {
    isFailure = false;
  }

  utilities.series([
    // Send on the data to the specified destination or destinations.
    function (seriesCallback) {
      var error;
      var data;

      switch (contextMethod) {
        case 'done':
          error = args[0];
          data = args[1];
          break;
        case 'fail':
          error = args[0];
          data = undefined;
          break;
        case 'succeed':
          error = undefined;
          data = args[0];
          break;
      };

      lc.sendData(error, data, seriesCallback);
    },

    // If this is an event from message type component, and this not a failure,
    // we need to delete the message.
    function (seriesCallback) {
      if (isFailure || !lc.receiptHandle) {
        return seriesCallback();
      }

      // We have a receiptHandle and the message needs deletion on success.
      lc.deleteMessageFromInputQueue(
        lc.receiptHandle,
        seriesCallback
      );
    },

    // Decrement the concurrency count. If this gets skipped because of errors
    // earlier in the series it isn't the end of the world; the count stays one
    // too high until the message times out.
    function (seriesCallback) {
      if (!lc.incremented) {
        return seriesCallback();
      }

      utilities.decrementConcurrencyCount(
        lc.component,
        lc.arnMap,
        seriesCallback
      );
    }
  ], function (error) {
    if (error) {
      console.error(error);

      // If we come out of this with an error, then make the final call to the
      // original context a failure.
      switch (contextMethod) {
        case 'done':
        case 'fail':
          args = [args[0] || error];
          break;
        case 'succeed':
          args = [error];
          break;
      };

      contextMethod = 'fail';
    }

    // Finally, call the original context method.
    lc.wrappedContext.originalContext[contextMethod].apply(
      lc.wrappedContext.originalContext,
      args
    );
  });
};

/**
 * Wrap the context functions so that we can clean up after one of the
 * callbacks is invoked.
 *
 * @param {Object} context
 * @return {Object} The wrapped context.
 */
lc.wrapContext = function (context) {
  // Need to keep track in case of multiple callbacks in bad code.
  var called = false;

  // Helper function to ensure that only the first of the functions called
  // does anything.
  function finalize (contextMethod, args) {
    if (called) {
      return;
    }

    called = true;
    lc.finalizeInvocation(contextMethod, args);
  }

  lc.wrappedContext = {
    originalContext: context,
    getRemainingTimeInMillis: function () {
      return context.getRemainingTimeInMillis();
    },
    succeed: function () {
      finalize('succeed', Array.prototype.slice.call(arguments, 0));
    },
    fail: function () {
      finalize('fail', Array.prototype.slice.call(arguments, 0));
    },
    done: function () {
      finalize('done', Array.prototype.slice.call(arguments, 0));
    }
  };

  return lc.wrappedContext;
};

/**
 * Handle the invocation as though this is an Event from Invocation type of
 * component.
 *
 * @param {Object} event
 * @param {Object} wrappedContext
 */
lc.handleAsEventFromInvocationType = function (event, wrappedContext) {
  originalExport[lc.handlerFunctionName](event, wrappedContext);
};

/**
 * Handle the invocation as though this is an Event from Message type of
 * component.
 *
 * This means consuming a message from the queue associated with this component.
 *
 * @param {Object} event
 * @param {Object} wrappedContext
 */
lc.handleAsEventFromMessageType = function (event, wrappedContext) {
  var message;

  utilities.receiveMessage(
    utilities.getQueueUrl(lc.component.name, lc.arnMap),
    lc.component.timeout,
    lc.component.queueWaitTime,
    function (error, result) {
      if (error) {
        return wrappedContext.fail(error);
      }

      // No message in the queue to process.
      if (!result) {
        // This really has to be fail(), as that ensures that nothing will get
        // passed on to other Lambda functions.
        return wrappedContext.fail(new Error(
          'No messages available in the queue.'
        ));
      }

      // A message with bad JSON will clutter up the queue with continual
      // attempts to process. Probably acceptable if we think of queue backlogs
      // and error messages in logs as important points of alerting for failure.
      try {
        message = JSON.parse(result.message);
      }
      catch (jsonError) {
        return wrappedContext.fail(util.format(
          'Queue message for component %s contains invalid JSON: %s',
          lc.component.name,
          jsonError.stack || jsonError.toString()
        ));
      }

      // Stash the message receipt handle for later; we'll need it to delete the
      // message after successful processing.
      lc.receiptHandle = result.receiptHandle;

      // Deliver the message and the wrapped context to the original handle.
      originalExport[lc.handlerFunctionName](message, wrappedContext);
    }
  );
};

// ---------------------------------------------------------------------------
// Managing errors.
// ---------------------------------------------------------------------------

// If an uncaught exception bubbles up from whatever the underlying handler
// does, then we still need to clean up Lambda Complex items such as the
// concurrency count, and also end this as a failure.
process.once('uncaughtException', function (error) {
  if (lc.handleUncaughtException) {
    console.error(util.format(
      'Uncaught exception: %s',
      error.stack || error
    ));
    lc.wrappedContext.fail(error);
  }
  else {
    throw error;
  }
});

// ---------------------------------------------------------------------------
// Export the function package and wrapped handle function.
// ---------------------------------------------------------------------------

// This is exported for testing purposes.
exports.lc = lc;

// Prevent naming the handle "lc", as that will break everything.
if (lc.handlerFunctionName === 'lc') {
  throw new Error('Invalid name for Lambda function handler: lc');
}

/**
 * A function to intercept the call and perform necessary tasks.
 *
 * @param {Object} event
 * @param {Object} context
 */
exports[lc.handlerFunctionName] = function (event, context) {
  console.info(
    util.format(
      'Invoked handler for application: %s, component: %s, event: ',
      lc.config.name,
      lc.component.name
    ),
    // In theory this could be large. Better to run it through console than to
    // try to log the whole thing.
    event
  );

  // The all-important context wrapping, so that Lambda Complex intercepts calls
  // to succeed, fail, and done made by the underlying handler.
  lc.wrapContext(context);

  utilities.loadArnMap(config, function (error, arnMap) {
    // Absent the ARN map, nothing else can work, so we have to fail here.
    if (error) {
      return lc.wrappedContext.fail(new Error(util.format(
        'Critical: failed to load ARN map, aborting immediately. %s',
        error
      )));
    }

    lc.arnMap = arnMap;

    utilities.incrementConcurrencyCount(
      lc.component,
      lc.arnMap,
      function (incrementError) {
        // Not worth ending things for a failure to increment the count. Just
        // log the issue.
        if (incrementError) {
          console.error(incrementError);
        }
        else {
          lc.incremented = true;
        }

        if (lc.component.type === constants.componentType.EVENT_FROM_INVOCATION) {
          return lc.handleAsEventFromInvocationType(event, lc.wrappedContext);
        }
        else if (lc.component.type === constants.componentType.EVENT_FROM_MESSAGE) {
          return lc.handleAsEventFromMessageType(event, lc.wrappedContext);
        }
        else {
          lc.wrappedContext.fail(new Error(util.format(
            'Unknown component type specified in configuration: %s',
            lc.component.type
          )));
        }
      }
    );
  });
};
